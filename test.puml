@startuml
'https://plantuml.com/class-diagram

package admin.domain.event {

abstract class BpsEvent <<Abstract Class>> {
    String userId;
    Instance time;
    String organizationId;
}

'asset recommendations'

class AssetRecommendationCreated extends BpsEvent {
    String id;
    String assetId;
    String levelId;
    String providerId;
    Map<Locale, String> localizedRationales;
}

class AssetRecommendationDeleted extends BpsEvent {
    String id;
    String assetId;
    String levelId;
    String providerId;
}

class AssetRecommendationRationaleCreated extends BpsEvent {
    String id;
    String assetId;
    String levelId;
    String providerId;
    Map<Locale, String> localizedRationales;
}

'asset universes'

class AssetUniverseCreated extends BpsEvent {
    String assetId;
    String universeId;
}

class AssetUniverseDeleted extends BpsEvent {
    String assetId;
    String universeId;
}

'recommendation providers'

class RecommendationProviderCreated extends BpsEvent {
    String id;
    Map<Locale, String> localizedNames;
}

class RecommendationProviderDeleted extends BpsEvent {
    String id;
}

class RecommendationLevelCreated extends BpsEvent {
    String id;
    String providerId;
    Map<Locale, String> localizedNames;
    Integer rank;
    String color;
}

class RecommendationLevelCreated extends BpsEvent {
    String id;
    String providerId;
}

'universes'

class UniverseCreated extends BpsEvent {
    String id;
    Map<Locale, String> localizedNames;
}

class UniverseDeleted extends BpsEvent {
    String id;
}

}

package admin.api {

class BpsAdminController {

}

}


package admin.application {

interface BpsEventRepository {
    List<BpsEvent> load(String organizationId);
    void append(List<BpsEvent> events);
}

class BpsAdminService {
    -void publishEvents(List<BpsEvent> events);
}

BpsAdminController -down-> BpsAdminService: calls
BpsAdminService -down-> BpsEventRepository: calls

}

package admin.application.command {

class CreateAssetRecommendation {}

class CreateRecommendationProvider {}

class CreateUniverse {}

class ImportBPS {}

class ReorderRecommendationLevel {}

class SetAssetUniverses {}

class TransferAssetRecommendation {}

class UpdateRecommendationRationale {}

}

package admin.domain {

class BankProductShelf {

    Map<Universe.UniverseId, Universe> universes;
    Map<RecommendationProvider.RecommendationProviderId, RecommendationProvider> providers;
    Map<Class<? extends BpsEvent>, Consumer<? extends BpsEvent>> eventHandlers;
    BpsEventContext bpsEventContext;
    Set<RecommendationLevelId> levelIds;
    Set<AssetRecommendationId> assetRecommendationIds;
    Set<UniverseId> universeIds;
    Set<RecommendationProviderId> providerIds;

    +void handle(BpsEvent bpsEvent);
    +void recommendationProviderCreated(RecommendationProviderCreated event);
    +void recommendationProviderDeleted(RecommendationProviderDeleted event);
    +void recommendationLevelCreated(RecommendationLevelCreated event);
    +void recommendationLevelDeleted(RecommendationLevelDeleted event);
    +void assetRecommendationRationaleCreated(AssetRecommendationRationaleCreated event);
    +void assetRecommendationCreated(AssetRecommendationCreated event);
    +void assetRecommendationDeleted(AssetRecommendationDeleted event);
    +void universeCreated(UniverseCreated event);
    +void universeDeleted(UniverseDeleted event);
    +void assetUniverseCreated(AssetUniverseCreated event);
    +void assetUniverseDeleted(AssetUniverseDeleted event);
    +UniverseCreated createUniverse(CreateUniverse cmd);
    +UniverseCreated updateUniverse(Universe.UniverseId id, CreateUniverse cmd);
    +List<BpsEvent> deleteUniverse(Universe.UniverseId cmd);
    +List<BpsEvent> setAssetUniverses(SetAssetUniverses cmd);
    +List<BpsEvent> createRecommendationProvider(CreateRecommendationProvider cmd);
    +List<BpsEvent> updateRecommendationProvider(RecommendationProvider.RecommendationProviderId providerId, CreateRecommendationProvider cmd);
    +List<BpsEvent> deleteRecommendationProvider(RecommendationProvider.RecommendationProviderId id);
    +RecommendationLevel getRecommendationLevel(RecommendationLevelId id);
    +List<BpsEvent> deleteRecommendationLevel(RecommendationProvider.RecommendationProviderId providerId, RecommendationLevelId levelId);
    +AssetRecommendationCreated createAssetRecommendation(CreateAssetRecommendation cmd);
    +AssetRecommendationRationaleCreated updateAssetRecommendationRationale(RecommendationProvider.RecommendationProviderId providerId, RecommendationLevelId levelId, String assetId, UpdateRecommendationRationale cmd);
    +Optional<AssetRecommendationDeleted> deleteAssetRecommendation(AssetRecommendationId id);
    +List<BpsEvent> transferAssetRecommendation(RecommendationProvider.RecommendationProviderId providerId, TransferAssetRecommendation cmd);
    +List<BpsEvent> importBps(ImportBPS cmd, Map<String, Set<String>> isinAssetIdMap, Set<AssetId> fetchedAssetIds);
    +List<BpsEvent> removeAssetFromBPS(String assetId);
    +Universe getUniverse(Universe.UniverseId universeId);

}

BankProductShelf -down-> BpsEvent: generates
admin.application.command -down-> BankProductShelf: accepts
BpsAdminService -down-> BankProductShelf: uses

}

package com.edgelab.events {

class EventBus {
    +void publishEvent(DomainEvent event);
}

BpsAdminService -down-> EventBus: calls

}

@enduml
